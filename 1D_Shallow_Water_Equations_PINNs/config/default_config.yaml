# Default Configuration file for setting up experiments for testing PINNs. Do not change!
# Only keys that are defined in the "default config" file are allowed to be set.
# The "None" value in python is in yaml called "null" without "".

#this_config_file: "default_config.yaml"

# --------------------------------------------------------------------------------------

# domain splitting & separate networks for u and h
number_of_models: 1  # number of models split over the time domain
train_only_on_first_interval: False  # train network only on the first section of the time interval
split_networks: False  # split network in two networks, one each for u and h

# network options
transition_function: False  # option for explicitly constraining the boundary conditions by applying a transition function
non_dimensionalization: True  # True: network describes solution in dimensionless space
save_output_over_training: True  # True: network output is saved on a discrete grid to animate it over training
save_symbolic_function_over_training: True  # True: PDE Losses are saved on a discrete grid to animate them over training

# initial and boundary conition settings
initial_sea_level: "gaussian"  # "gaussian", "cosine_bell" or "sine" - see Initial_And_Boundary_Conditions
boundary_conditions: "closed_boundaries"  # "closed_boundaries": u: 0 at boundaries, "boundary_forcing": periodic forcing in h at the boundaries, "periodic_boundaries": two boundaries are connected as in a circle
new_initial_conditions: None  # initial conditions from a previous model to be passed to the next model
new_initial_condition_sampling_points: None  # respective sampling points of new_initial_conditions

# select parts of the objective function - every selected (True) part is added to the total MSE
train_on_solution: False  # MSE comparing the error compared to the numerical solution
train_on_PINNs_Loss: True  # MSE term for the initial and boundary conditions and the PDE term
train_on_boundary_condition_loss: True  # True: add BC loss term to total MSE, False: BC term is not considered
train_on_initial_condition_loss: True  # True: add IC loss term to total MSE, False: IC term is not considered

# dimensional parameters
momentum_advection: False  # in- or exclude momentum advection from the momentum equation
initial_perturbation_amplitude: 1.0  # amplitude of sine wave, cosine or gaussian bell [m]
average_sea_level: 100.0  # reference sea level from which the elevations are modeled [m]
gravitational_acceleration: 9.81  # [ms^-1]
momentum_dissipation: 0.0  # [m^2/s]
nonlinear_drag_coefficient: 0.0  # dimensionless

# reference scales
horizontal_length_scale: 1000000.0  # length scale for horizontal lengths and velocities [m]
time_scale: 86400.0  # time scale for all processes (vertical and horizontal) [s]
vertical_scaling_factor: 1.0  # parameter for adjusting the vertical length scale see Bihlo and Popovych April 2021
vertical_length_scale: null  # length scale for vertical lengths and velocities [m] - is defined later

# space for sampling methods -> determines domain of training based on the numerical model
numerical_solution_time_interval: [0.0, 129000.0]  # time interval in numerical model [m]
numerical_solution_time_step: 60.0  # time step in numerical discretization [s]
numerical_solution_x_interval: [-1000000.0, 1000000.0]  # spatial interval in numerical model [m]
numerical_solution_space_step: 10000.0  # spatial step in numerical discretization [m]
minimum_x: null  # lower boundary of the spatial interval for training [m]
maximum_x: null  # upper boundary of the spatial interval for training [m]
minimum_time: null  # lower boundary of the time interval for training [m]
maximum_time: null  # upper boundary of the time interval for training [m]

# These weights determine the contribution of each Mean Squared Error (MSE) term to the total MSE
boundary_condition_weight: 1  # loss weight for the loss term including all boundary conditions
initial_condition_weight: 1  # loss weight for the loss term including all initial conditions
symbolic_function_weight: 1  # loss weight for the loss term including all PDEs of the system of equations

# The number of sampling points for computing the MSE terms for BC, IC and within the domain for the symbolic function
boundary_condition_batch_size: 1000  # number of sampling points on each boundary (split over the models)
initial_condition_batch_size: 1000  # number of sampling points for each initial condition (split over the models)
symbolic_function_batch_size: 40000  # number of sampling points within the x-t-domain (split over the models)

# set Hyper Parameters
device: "cpu"  # select "cuda" to run all computations in Pytorch on the GPU, otherwise select "CPU"
root_mean_squared_error: False  # if False: mean squared errors are used, if True: root mean squared errors
training_steps: 10  # sum of the number of training steps of all models
batch_resampling_period: 10  # number of training steps after which new collocation points are selected
console_output_period: 1  # number of training steps after which new collocation points are selected

# optimizer options
optimizer: "FullBatchLBFGS"  # torch.optim.Adam  # optimizer used for the entire training, if:  projected_gradients: False
learning_rate: 1  # the default learning rates are 0.001 for Adam and 1 for LBFGS
line_search: "Armijo"  # "strong_wolfe"  # valid options are None or "strong_wolfe", only used for LBFGS
projected_gradients: False  # When this is True, the optimizer is automatically set to be Adam

# activation function and selection of the depth and width of the neural network
number_of_layers: 5  # number of hidden layers
neurons_per_layer: 200  # number of neurons in each hidden layer
layer_sizes: null
activation_function: "torch.tanh"  # activation function applied on all hidden layers, but not on the output layer

# initialize for later use
fraction_of_time_interval: null